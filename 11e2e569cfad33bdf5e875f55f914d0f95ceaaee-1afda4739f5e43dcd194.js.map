{"version":3,"file":"11e2e569cfad33bdf5e875f55f914d0f95ceaaee-1afda4739f5e43dcd194.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/documentation/adobe-campaign-classic/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/acp-mobile-sdkdocs/acp-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" api=\"extension-version\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static String extensionVersion();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`String campaignClassicExtensionVersion = CampaignClassic.extensionVersion();\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"extension-version\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func extensionVersion() -> String\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let campaignClassicExtensionVersion  = ACPCampaignClassic.extensionVersion()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`+(NSString) extensionVersion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSString *campaignClassicExtensionVersion = [ACPCampaignClassic extensionVersion];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-device\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`To prepare your app to handle push notifications, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://firebase.google.com/docs/cloud-messaging/android/client\"\n      }}>{`setting up a Firebase Cloud Messaging client app on Android`}</a>{`. After you receive the Firebase Cloud Messaging (FCM) SDK registration token, send this token and the device information to Campaign Classic by using the `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API registers a device with your Campaign Classic registration server. It takes the FCM registration token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration. A boolean value is returned in the callback, which signals whether the registration was successful.`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerDevice(final String token, final String userKey, final Map<String, Object> additionalParams, final AdobeCallback<Boolean> callback)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onNewToken(String token) {\n    Log.d(\"TestApp\", \"Refreshed token: \" + token);\n\n    // If you want to send messages to this application instance or\n    // manage this app's subscriptions on the server side, send the\n    // Instance ID token to your app server.\n    if (token != null) {\n                Log.d(\"TestApp\", \"FCM SDK registration token received : \" + token);\n                // Create a map of additional parameters\n                Map<String, Object> additionalParams = new HashMap<String, Object>();\n                additionalParams.put(\"name\", \"John\");\n                additionalParams.put(\"serial\", 12345);\n                additionalParams.put(\"premium\", true);\n                // Send the registration info\n                CampaignClassic.registerDevice(token, \"john@example.com\",additionalParams,new AdobeCallback<Boolean>() {\n                    @Override\n                    public void call(final Boolean status) {\n                        Log.d(\"TestApp\", \"Registration Status: \" + status);\n                    }\n                });\n      }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"register-device\" repeat=\"12\" mdxType=\"Variant\" />\n    <p>{`To get your app ready to handle push notifications, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1\"\n      }}>{`configuring remote notification support`}</a>{`. After you receive the Apple Push Notification service (APNs) token, send this token and the device information to Campaign Classic using the `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API registers a device with your Campaign Classic registration server. It takes the APNS token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration. A boolean value is returned in the callback, which signals whether the registration was successful.`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func registerDevice(_ token: Data, userKey: String?, additionalParams: [String: Any]?, callback: ((Bool) -> Void)?)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  let params: [String: Any] = [\n    \"name\": \"John\",\n    \"serial\": 12345,\n    \"premium\": true\n  ]\n  ACPCampaignClassic.registerDevice(deviceToken, userKey: \"john@example.com\", additionalParams: params) {\n    result in\n    print(\"Registration status: \\\\(result)\")\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) registerDevice: (nonnull NSData*) token userKey: (nullable NSString*) userKey additionalParams: (nullable NSDictionary*) additionalParams callback: (nullable void (^) (BOOL success)) callback;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  // Set the deviceToken that the APNS has assigned to the device\n  NSMutableDictionary *params = [[NSMutableDictionary alloc] initWithObjectsAndKeys:          @\"John\", @\"name\", nil];\n  [params setObject: [NSNumber numberWithInt:12345] forKey: @\"serial\"];\n  [params setObject: [NSNumber numberWithBool:YES]  forKey: @\"premium\"];\n\n[ACPCampaignClassic registerDevice:deviceToken userKey:@\"john@example.com\" additionalParams:params callback:^(BOOL success) {\n    NSLog(@\"Registration Status: %d\", success);\n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-extension\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerExtension()\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`CampaignClassic.registerExtension();\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"register-extension\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func registerExtension()\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`ACPCampaignClassic.registerExtension()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`+ (void) registerExtension;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`[ACPCampaignClassic registerExtension];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"track-notification-click\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <p>{`If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null, or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`messageId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void trackNotificationClick(final Map<String, String> trackInfo)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onResume() {\n  super.onResume();\n  // Perform any other app related tasks\n  // The messageId (_mId) and deliveryId (_dId) can be passed in the intent extras.\n  // This is assuming you extract the messageId and deliveryId from the\n  // received push message and are including it in the intent (intent.putExtra())\n  // of the displayed notification.\n\n  Bundle extras = getIntent().getExtras();\n  if (extras != null) {\n    String deliveryId = extras.getString(\"_dId\");\n    String messageId = extras.getString(\"_mId\");\n    if (deliveryId != null && messageId != null) {\n      Map<String,String> trackInfo = new HashMap<>();\n      trackInfo.put(\"_mId\", messageId);\n      trackInfo.put(\"_dId\", deliveryId);\n\n      // Send the tracking information for message opening\n      CampaignClassic.trackNotificationClick(trackInfo);\n    }\n  }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"track-notification-click\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`launchOptions`}</inlineCode>{` that were received upon opening the application or `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`, which contains the received push payload in `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`broadlogId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func trackNotificationClick(_ trackInfo: [String: String])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n  guard let userInfo = response.notification.request.content.userInfo as? [String: String] else {\n    return;\n  }\n  ACPCampaignClassic.trackNotificationClick(userInfo);\n  completionHandler();\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) trackNotificationClick: (nonnull NSDictionary<NSString*, NSString*>*) trackInfo;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler\n{\n  NSLog(@\"User Info : %@\",response.notification.request.content.userInfo);\n  // Track action selected by the user for a given notification\n  [ACPCampaignClassic trackNotificationClick:response.notification.request.content.userInfo];\n  completionHandler();\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"track-notification-receive\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-4\"\n    }}>{`Java`}</h4>\n    <p>{`If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`messageId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void trackNotificationReceive(final Map<String, String> trackInfo)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MyFirebaseMessagingService extends FirebaseMessagingService {\n  @Override\n  public void onMessageReceived(RemoteMessage remoteMessage) {\n    Log.d(\"TestApp\", \"Receive message from: \" + remoteMessage.getFrom());\n    Map<String,String> payloadData = message.getData();\n\n    // Check if message contains data payload.\n    if (payloadData.size() > 0) {\n      Map<String,String> trackInfo = new HashMap<>();\n      trackInfo.put(\"_mId\", payloadData.get(\"_mId\"));\n      trackInfo.put(\"_dId\", payloadData.get(\"_dId\"));\n\n      // Send the tracking information for message received\n      CampaignClassic.trackNotificationReceive(trackInfo);\n    }\n  }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"track-notification-receive\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`launchOptions`}</inlineCode>{` that were received upon opening the application or `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{` , which contains the received push payload in `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`broadlogId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <h4 {...{\n      \"id\": \"swift-4\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func trackNotificationReceive(_ trackInfo: [String: String])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n\n  guard let aps = userInfo[\"aps\"] as? [String: Any] else {\n    completionHandler(.failed)\n    return\n  }\n  if aps[\"content-available\"] as? Int == 1 {\n    // Track silent push notification receive\n    ACPCampaignClassic.trackNotificationReceive(userInfo)\n    completionHandler(.noData)\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-4\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) trackNotificationReceive: (nonnull NSDictionary<NSString*, NSString*>*) trackInfo;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\n  if ( launchOptions) NSLog(@\"launchOptions: %@\", [launchOptions description]);\n  // Tracking silent push notification receive\n  if ( [launchOptions[@\"aps\"][@\"content-available\"] intValue] == 1 ) {\n    NSLog(@\"Silent Push Notification\");\n    [ACPCampaignClassic trackNotificationReceive:launchOptions];\n    completionHandler(UIBackgroundFetchResultNoData);\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","platform","api","repeat","parentName","isMDXComponent"],"sourceRoot":""}