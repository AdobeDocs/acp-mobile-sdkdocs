"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[8457,2517],{55510:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return s},default:function(){return b}});var a=n(87462),i=n(63366),r=(n(15007),n(64983)),l=n(91515),o=n(24920),d=n(40901),p=["components"],s={},m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",t)}},u=m("InlineAlert"),c=m("TabsBlock"),x={_frontmatter:s},h=l.Z;function b(e){var t=e.components,n=(0,i.Z)(e,p);return(0,r.mdx)(h,(0,a.Z)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"identity"},"Identity"),(0,r.mdx)(d.default,{query:"platform=outdated-version&componentClass=InlineNestedAlert",mdxType:"Alerts"}),(0,r.mdx)("p",null,"The Identity extension is bundled with ",(0,r.mdx)("a",{parentName:"p",href:"../index.md"},"Mobile Core")," and enables your app with the Experience Cloud ID (ECID). This service helps with the synchronization of Adobe and other customer identifiers."),(0,r.mdx)(u,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"On web or other platforms, there might situations where this extension might not be required, and the implementation of this SDK extension on mobile apps is required."),(0,r.mdx)("p",null,"To get started with Identity, complete the following steps:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Add the ",(0,r.mdx)("strong",{parentName:"li"},"Identity")," extension to your app."),(0,r.mdx)("li",{parentName:"ol"},"Implement the SDK APIs to complete the following tasks:",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Update customer IDs."),(0,r.mdx)("li",{parentName:"ul"},"Append Adobe visitor data to a URL string."),(0,r.mdx)("li",{parentName:"ul"},"Return customer IDs."),(0,r.mdx)("li",{parentName:"ul"},"Retrieve Experience Cloud IDs."),(0,r.mdx)("li",{parentName:"ul"},"Set advertising IDs."),(0,r.mdx)("li",{parentName:"ul"},"Set the device notification for push notifications.")))),(0,r.mdx)("h2",{id:"add-the-identity-extension-to-your-app"},"Add the Identity extension to your app"),(0,r.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"7",mdxType:"TabsBlock"}),(0,r.mdx)("p",null,"Android"),(0,r.mdx)(o.default,{query:"platform=android&task=add",mdxType:"Tabs"}),(0,r.mdx)("p",null,"iOS"),(0,r.mdx)(o.default,{query:"platform=ios&task=add",mdxType:"Tabs"}),(0,r.mdx)("p",null,"React Native"),(0,r.mdx)(o.default,{query:"platform=react-native&task=add",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Flutter"),(0,r.mdx)(o.default,{query:"platform=flutter&task=add",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Cordova"),(0,r.mdx)(o.default,{query:"platform=cordova&task=add",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Unity"),(0,r.mdx)(o.default,{query:"platform=unity&task=add",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Xamarin"),(0,r.mdx)(o.default,{query:"platform=xamarin&task=add",mdxType:"Tabs"}),(0,r.mdx)("h2",{id:"register-the-identity-extension"},"Register the Identity extension"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerExtension()")," API registers the Identity extension with the Mobile Core extension. This API allows the extension to send and receive events to and from the Mobile SDK."),(0,r.mdx)("p",null,"To register the Identity extension, use the following code sample:"),(0,r.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"7",mdxType:"TabsBlock"}),(0,r.mdx)("p",null,"Android"),(0,r.mdx)(o.default,{query:"platform=android&task=register",mdxType:"Tabs"}),(0,r.mdx)("p",null,"iOS"),(0,r.mdx)(o.default,{query:"platform=ios&task=register",mdxType:"Tabs"}),(0,r.mdx)("p",null,"React Native"),(0,r.mdx)(o.default,{query:"platform=react-native&task=register",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Flutter"),(0,r.mdx)(o.default,{query:"platform=flutter&task=register",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Cordova"),(0,r.mdx)(o.default,{query:"platform=cordova&task=register",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Unity"),(0,r.mdx)(o.default,{query:"platform=unity&task=register",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Xamarin"),(0,r.mdx)(o.default,{query:"platform=xamarin&task=register",mdxType:"Tabs"}),(0,r.mdx)(u,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Previously known as MCID, the Experience Cloud ID (ECID) is a 38 character ID that uniquely identifies each visitor in the Adobe Experience Platform."),(0,r.mdx)("p",null,"After the configuration is complete, an ECID is generated and, where applicable, is included on all Analytics and Audience Manager hits. Other IDs, such as custom and automatically-generated IDs, continue to be sent with each hit."),(0,r.mdx)("h2",{id:"visitor-tracking-between-an-app-and-the-mobile-web"},"Visitor tracking between an app and the mobile web"),(0,r.mdx)("p",null,"If your app opens mobile web content, you need to ensure that visitors are not identified separately as they move between the native and mobile web."),(0,r.mdx)("h3",{id:"visitor-ids-in-apps"},"Visitor IDs in apps"),(0,r.mdx)("p",null,"The Mobile SDK generates a unique visitor ID when the app is installed. This ECID is stored in persistent memory on the mobile device and is sent with every hit. The ECID is removed when the user uninstalls the app or when the user sets the Mobile SDK global privacy status to ",(0,r.mdx)("inlineCode",{parentName:"p"},"optedout"),"."),(0,r.mdx)(u,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"When the Mobile SDK privacy status is set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"optedout"),", and the ECID is removed, a new unique visitor ID (ECID) is generated when the user sets the global privacy status to ",(0,r.mdx)("inlineCode",{parentName:"p"},"optedin"),"."),(0,r.mdx)(u,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"App visitor IDs persist through upgrades."),(0,r.mdx)("h3",{id:"visitor-ids-in-the-mobile-web"},"Visitor IDs in the mobile web"),(0,r.mdx)("p",null,"Typical mobile web implementations use the same standard analytics ",(0,r.mdx)("inlineCode",{parentName:"p"},"s_code.js")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"AppMeasurement.js")," that is used in desktop sites. The JavaScript libraries have their own methods of generating unique visitor IDs, which causes a different visitor ID to be generated when you open mobile web content from your app."),(0,r.mdx)("p",null,"To use the same visitor ID in the app and mobile web and pass the visitor ID to the mobile web in the URL, complete the following steps:"),(0,r.mdx)("h3",{id:"implementing-visitor-tracking-between-an-app-and-the-mobile-web"},"Implementing visitor tracking between an app and the mobile web"),(0,r.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"7",mdxType:"TabsBlock"}),(0,r.mdx)("p",null,"Android"),(0,r.mdx)(o.default,{query:"platform=android&task=implement",mdxType:"Tabs"}),(0,r.mdx)("p",null,"iOS"),(0,r.mdx)(o.default,{query:"platform=ios&task=implement",mdxType:"Tabs"}),(0,r.mdx)("p",null,"React Native"),(0,r.mdx)(o.default,{query:"platform=react-native&task=implement",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Flutter"),(0,r.mdx)(o.default,{query:"platform=flutter&task=implement",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Cordova"),(0,r.mdx)(o.default,{query:"platform=cordova&task=implement",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Unity"),(0,r.mdx)(o.default,{query:"platform=unity&task=implement",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Xamarin"),(0,r.mdx)(o.default,{query:"platform=xamarin&task=implement",mdxType:"Tabs"}),(0,r.mdx)("p",null,"The ID service code on the destination domain extracts the ECID from the URL instead of sending a request to Adobe for a new ID. The ID service code on the destination page uses this ECID to track the visitor. On hits from the mobile web content, verify that the ",(0,r.mdx)("inlineCode",{parentName:"p"},"mid")," parameter exists on each hit, and that this value matches the ",(0,r.mdx)("inlineCode",{parentName:"p"},"mid"),"value that is being sent by the app code."))}b.isMDXComponent=!0},24920:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return p},default:function(){return c}});var a,i=n(87462),r=n(63366),l=(n(15007),n(64983)),o=n(91515),d=["components"],p={},s=(a="Variant",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),m={_frontmatter:p},u=o.Z;function c(e){var t=e.components,n=(0,r.Z)(e,d);return(0,l.mdx)(u,(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)(s,{platform:"android",task:"add",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java"},"Java"),(0,l.mdx)("p",null,"Import the library:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobile.*;\n")),(0,l.mdx)(s,{platform:"ios",task:"add",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift"},"Swift"),(0,l.mdx)("p",null,"In Swift, the ACPCore library includes ACPIdentity:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"import ACPCore\n")),(0,l.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import  "ACPIdentity.h"\n')),(0,l.mdx)(s,{platform:"react-native",task:"add",repeat:"2",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript"},"JavaScript"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},"import {ACPIdentity} from '@adobe/react-native-acpcore';\n")),(0,l.mdx)(s,{platform:"flutter",task:"add",repeat:"2",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"dart"},"Dart"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter_acpcore/flutter_acpidentity.dart';\n")),(0,l.mdx)(s,{platform:"cordova",task:"add",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"cordova"},"Cordova"),(0,l.mdx)("p",null,"After creating your Cordova app and adding the Android and iOS platforms, the Identity extension for Cordova can be added with this command:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cordova"},"cordova plugin add https://github.com/adobe/cordova-acpcore.git\n")),(0,l.mdx)(s,{platform:"unity",task:"add",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c"},"C#"),(0,l.mdx)("p",null,"After importing the ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/adobe/unity-acpcore/blob/master/bin/ACPCore-0.0.1-Unity.zip"},"ACPCore.unitypackage"),", the Identity extension for Unity can be added with following code in the MainScript"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"using com.adobe.marketing.mobile;\n")),(0,l.mdx)(s,{platform:"xamarin",task:"add",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-1"},"C#"),(0,l.mdx)("p",null,"After adding the iOS ACPCore NuGet package or the Android ACPIdentity NuGet package, the Identity extension can be added by this import statement"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"using Com.Adobe.Marketing.Mobile;\n")),(0,l.mdx)(s,{platform:"android",task:"register",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("p",null,"After calling the ",(0,l.mdx)("inlineCode",{parentName:"p"},"setApplication()")," method in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"onCreate()")," method, register the extension. If the registration was not successful, an ",(0,l.mdx)("inlineCode",{parentName:"p"},"InvalidInitException")," is thrown."),(0,l.mdx)("h4",{id:"java-1"},"Java"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public class MobiletApp extends Application {\n@Override\npublic void onCreate() {\nsuper.onCreate();\n     MobileCore.setApplication(this);\n     try {\n         Identity.registerExtension();\n     } catch (Exception e) {\n         //Log the exception\n     }\n  }\n}\n")),(0,l.mdx)(s,{platform:"ios",task:"register",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("p",null,"Register the Identity extension in your app's ",(0,l.mdx)("inlineCode",{parentName:"p"},"didFinishLaunchingWithOptions")," function:"),(0,l.mdx)("h4",{id:"swift-1"},"Swift"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n  ACPIdentity.registerExtension();\n  // Override point for customization after application launch.\n  return true;\n}\n")),(0,l.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [ACPIdentity registerExtension];\n  // Override point for customization after application launch.\n  return YES;\n}\n")),(0,l.mdx)(s,{platform:"react-native",task:"register",repeat:"1",mdxType:"Variant"}),(0,l.mdx)("p",null,"When using React Native, registering Identity with Mobile Core should be done in native code, which is shown under the Android and iOS tabs."),(0,l.mdx)(s,{platform:"flutter",task:"register",repeat:"1",mdxType:"Variant"}),(0,l.mdx)("p",null,"When using Flutter, registering Identity with Mobile Core should be done in native code, which is shown under the Android and iOS tabs."),(0,l.mdx)(s,{platform:"cordova",task:"register",repeat:"1",mdxType:"Variant"}),(0,l.mdx)("p",null,"When using React Native, registering Identity with Mobile Core should be done in native code, which is shown under the Android and iOS tabs."),(0,l.mdx)(s,{platform:"unity",task:"register",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("p",null,"Register the Identity extension in your app's ",(0,l.mdx)("inlineCode",{parentName:"p"},"Start()")," function:"),(0,l.mdx)("h4",{id:"c-2"},"C#"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"void Start() {\n  ACPIdentity.RegisterExtension();\n}\n")),(0,l.mdx)(s,{platform:"xamarin",task:"register",repeat:"7",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-3"},"C#"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"iOS")),(0,l.mdx)("p",null,"Register the Identity extension in your app's ",(0,l.mdx)("inlineCode",{parentName:"p"},"FinishedLaunching()")," function:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n  global::Xamarin.Forms.Forms.Init();\n  LoadApplication(new App());\n    ACPIdentity.RegisterExtension();\n\n  // start core\n  ACPCore.Start(startCallback);\n\n  return base.FinishedLaunching(app, options);\n}\n\nprivate void startCallback()\n{\n  // set launch config\n  ACPCore.ConfigureWithAppID("yourAppId");\n}\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Android")),(0,l.mdx)("p",null,"Register the Identity extension in your app's ",(0,l.mdx)("inlineCode",{parentName:"p"},"OnCreate()")," function:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'protected override void OnCreate(Bundle savedInstanceState)\n{\n  base.OnCreate(savedInstanceState);\n  global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n  LoadApplication(new App());\n\n  ACPIdentity.RegisterExtension();\n\n  // start core\n  ACPCore.Start(new CoreStartCompletionCallback());\n}\n\nclass CoreStartCompletionCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object callback)\n  {\n    // set launch config\n    ACPCore.ConfigureWithAppID("yourAppId");\n  }\n}\n')),(0,l.mdx)(s,{platform:"android",task:"implement",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-2"},"Java"),(0,l.mdx)("p",null,"To append visitor information to the URL that is being used to open the web view, call ",(0,l.mdx)("a",{parentName:"p",href:"#appendtourl-appendvisitorinfoforurl"},"appendVisitorInfoForUrl"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.appendVisitorInfoForURL("https://example.com", new AdobeCallback<String>() {    \n    @Override    \n    public void call(String urlWithAdobeVisitorInfo) {        \n        //handle the new URL here        \n        //For example, open the URL on the device browser        \n        //        \n        Intent i = new Intent(Intent.ACTION_VIEW);        \n        i.setData(Uri.parse(urlWithAdobeVisitorInfo));        \n        startActivity(i);    \n    }\n});\n')),(0,l.mdx)("p",null,"Alternately, starting in SDK version 1.4.0 (Identity version 1.1.0), you can call ",(0,l.mdx)("a",{parentName:"p",href:"#geturlvariables"},"getUrlVariables")," and build your own URL:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.getUrlVariables(new AdobeCallback<String>() {    \n    @Override    \n    public void call(String stringWithAdobeVisitorInfo) {        \n        //handle the URL query parameter string here \n        //For example, open the URL on the device browser        \n        //        \n        Intent i = new Intent(Intent.ACTION_VIEW);        \n        i.setData(Uri.parse("https://example.com?" + urlWithAdobeVisitorInfo));        \n        startActivity(i);    \n    }\n});\n')),(0,l.mdx)(s,{platform:"ios",task:"implement",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,l.mdx)("p",null,"To append visitor information to the URL that is being used to open the web view, call ",(0,l.mdx)("a",{parentName:"p",href:"./api-reference.md#appendtourl-appendvisitorinfoforurl"},"appendToUrl"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSURL* url = [[NSURL alloc] initWithString:@"www.example.com"];\n[ACPIdentity appendToUrl:url withCallback:^(NSURL * _Nullable urlWithVisitorData) {    \n// handle the appended url here\n}];\n')),(0,l.mdx)("p",null,"Alternately, starting with SDK version 2.3.0 (ACPIdentity version 2.1.0), you can call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#geturlvariables"},"getUrlVariables")," and build your own URL:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[ACPIdentity getUrlVariables:^(NSString * _Nullable urlVariables) {    \n  // handle the URL query parameter string here\n  NSString* urlString = @"https://example.com";\n  NSString* urlStringWithVisitorData = [NSString stringWithFormat:@"%@?%@", urlString, urlVariables];\n  NSURL* urlWithVisitorData = [NSURL URLWithString:urlStringWithVisitorData];\n  [[UIApplication sharedApplication] openURL:urlWithVisitorData options:@{} completionHandler:^(BOOL success) {\n    // handle openURL success\n  }];\n}];\n')),(0,l.mdx)(s,{platform:"react-native",task:"implement",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript-1"},"JavaScript"),(0,l.mdx)("p",null,"To append visitor information to the URL that is being used to open the web view, call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#appendtourl-appendvisitorinfoforurl"},"appendVisitorInfoForUrl"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.appendVisitorInfoForURL("www.example.com").then(urlWithVistorData => console.log("Url with Visitor Data = " + urlWithVisitorData));\n')),(0,l.mdx)("p",null,"Alternately, starting with SDK version 1.0.5, you can call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#geturlvariables"},"getUrlVariables")," and build your own URL:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.getUrlVariables().then(urlVariables => console.log("query params = " + urlVariables));\n')),(0,l.mdx)(s,{platform:"flutter",task:"implement",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"dart-1"},"Dart"),(0,l.mdx)("p",null,"To append visitor information to the URL that is being used to open the web view, call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#appendtourl-appendvisitorinfoforurl"},"appendVisitorInfoForUrl"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-dart"},'String result = "";\n\ntry {\n  result = await FlutterACPIdentity.appendToUrl("www.example.com");\n} on PlatformException {\n  log("Failed to append URL");\n}\n')),(0,l.mdx)("p",null,"Alternately, starting with SDK version 1.0.0-beta.1, you can call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#geturlvariables"},"getUrlVariables")," and build your own URL:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-dart"},'String result = "";\n\ntry {\n  result = await FlutterACPIdentity.urlVariables;\n} on PlatformException {\n  log("Failed to get url variables");\n}\n')),(0,l.mdx)(s,{platform:"cordova",task:"implement",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"cordova-1"},"Cordova"),(0,l.mdx)("p",null,"To append visitor information to the URL that is being used to open the web view, call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#appendtourl-appendvisitorinfoforurl"},"appendVisitorInfoForUrl"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.appendVisitorInfoForUrl("https://example.com", function(handleCallback) {\n  console.log("AdobeExperenceSDK: Url with Visitor Data = " + handleCallback);\n}, function(handleError) {\n  console.log("AdobeExperenceSDK: Failed to append URL : " + handleError);\n});\n')),(0,l.mdx)("p",null,"Alternately, you can call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#geturlvariables"},"getUrlVariables")," and build your own URL:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.getUrlVariables(function (handleCallback) {\n  console.log("AdobeExperienceSDK: Url variables: " + handleCallback);\n}, function (handleError) {\n  console.log("AdobeExperenceSDK: Failed to retrieve url variables : " + handleError);\n});\n')),(0,l.mdx)(s,{platform:"unity",task:"implement",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-4"},"C#"),(0,l.mdx)("p",null,"To append visitor information to the URL that is being used to open the web view, call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#appendtourl-appendvisitorinfoforurl"},"AppendToUrl"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'[MonoPInvokeCallback(typeof(AdobeIdentityAppendToUrlCallback))]\npublic static void HandleAdobeIdentityAppendToUrlCallback(string url)\n{\n    print("Url is : " + url);\n}\nACPIdentity.AppendToUrl("https://www.adobe.com", HandleAdobeIdentityAppendToUrlCallback);\n')),(0,l.mdx)("p",null,"Alternately, you can call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#geturlvariables"},"GetUrlVariables")," and build your own URL:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'[MonoPInvokeCallback(typeof(AdobeGetUrlVariables))]\npublic static void HandleAdobeGetUrlVariables(string urlVariables)\n{\n    print("Url variables are : " + urlVariables);\n}\nACPIdentity.GetUrlVariables(HandleAdobeGetUrlVariables);\n')),(0,l.mdx)(s,{platform:"xamarin",task:"implement",repeat:"12",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-5"},"C#"),(0,l.mdx)("p",null,"To append visitor information to the URL that is being used to open the web view, call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#appendtourl-appendvisitorinfoforurl"},"AppendToUrl"),":"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"iOS")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.AppendToUrl(url, callback => {\n  Console.WriteLine("Appended url: " + callback);\n});\n')),(0,l.mdx)("p",null,"To append visitor information to the URL that is being used to open the web view, call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#appendtourl-appendvisitorinfoforurl"},"AppendVisitorInfoForUrl"),":"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Android")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.AppendVisitorInfoForURL("https://example.com", new StringCallback());\n\nclass StringCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object stringContent)\n  {\n    if (stringContent != null)\n    {\n      Console.WriteLine("Appended url: " + stringContent);\n    } \n    else \n    {\n      Console.WriteLine("null content in string callback");\n    }\n  }\n}\n')),(0,l.mdx)("p",null,"Alternately, you can call ",(0,l.mdx)("a",{parentName:"p",href:"api-reference.md#geturlvariables"},"GetUrlVariables")," and build your own URL:"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"iOS")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.GetUrlVariables(callback => {\n  Console.WriteLine("Url variables: " + callback);\n});\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Android")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.GetUrlVariables(new StringCallback());\n\nclass StringCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object stringContent)\n  {\n    if (stringContent != null)\n    {\n      Console.WriteLine("Url variables: " + stringContent);\n    } \n    else \n    {\n      Console.WriteLine("null content in string callback");\n    }\n  }\n}\n')))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-documentation-mobile-core-identity-index-md-beb3ff2350ad367fcd42.js.map