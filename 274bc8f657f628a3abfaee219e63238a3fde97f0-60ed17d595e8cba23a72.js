"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[5871],{81455:function(a,e,n){n.r(e),n.d(e,{_frontmatter:function(){return c},default:function(){return x}});var t,r=n(87462),i=n(63366),l=(n(15007),n(64983)),o=n(91515),d=["components"],c={},s=(t="Variant",function(a){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",a)}),m={_frontmatter:c},p=o.Z;function x(a){var e=a.components,n=(0,i.Z)(a,d);return(0,l.mdx)(p,(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,l.mdx)(s,{platform:"android",task:"add",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java"},"Java"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Add the ",(0,l.mdx)("a",{parentName:"li",href:"../mobile-core/index.md"},"Mobile Core")," and Analytics extensions to your project using the app's Gradle file.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"implementation 'com.adobe.marketing.mobile:sdk-core:1.+'\nimplementation 'com.adobe.marketing.mobile:analytics:1.+'\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Import the Analytics extension in your application's main activity.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Analytics;\n")),(0,l.mdx)(s,{platform:"ios",task:"add",repeat:"7",mdxType:"Variant"}),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Add the ",(0,l.mdx)("a",{parentName:"li",href:"../mobile-core/index.md"},"Mobile Core")," and Analytics extensions to your project using Cocoapods."),(0,l.mdx)("li",{parentName:"ol"},"Add the following pods in your ",(0,l.mdx)("inlineCode",{parentName:"li"},"Podfile"),":")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-ruby"},"pod 'ACPCore'\npod 'ACPAnalytics'\n")),(0,l.mdx)("ol",{start:3},(0,l.mdx)("li",{parentName:"ol"},"Import the Analytics and Identity libraries:")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Swift")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"import ACPCore\nimport ACPAnalytics\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Objective-C")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import "ACPCore.h"\n#import "ACPAnalytics.h"\n#import "ACPIdentity.h"\n')),(0,l.mdx)(s,{platform:"react-native",task:"add",repeat:"13",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript"},"JavaScript"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Install Adobe Analytics.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install @adobe/react-native-acpanalytics\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Link the module and the application.")),(0,l.mdx)("p",null,"For React Native versions 0.6 and above, you can use the ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/react-native-community/cli/blob/master/docs/autolinking.md"},"CLI autolink feature")," to link the module while building the app."),(0,l.mdx)("p",null,"For React Native versions less than or equal to 0.59, you can use the following scripts:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-bash"}," react-native link @adobe/react-native-acpanalytics\n")),(0,l.mdx)("p",null,"If you are using iOS and ",(0,l.mdx)("inlineCode",{parentName:"p"},"cocoapods"),", run:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-bash"}," cd ios/ && pod install\n")),(0,l.mdx)("ol",{start:3},(0,l.mdx)("li",{parentName:"ol"},"Import the extension.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"}," import {ACPAnalytics} from '@adobe/react-native-acpanalytics';\n")),(0,l.mdx)("ol",{start:4},(0,l.mdx)("li",{parentName:"ol"},"Get the extension version.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},' ACPAnalytics.extensionVersion().then(version => console.log("AdobeExperienceSDK: ACPAnalytics version: " + version));\n')),(0,l.mdx)(s,{platform:"flutter",task:"add",repeat:"7",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"flutter"},"Flutter"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Install Analytics.")),(0,l.mdx)("p",null,"Instructions on installing the Analytics SDK in Flutter can be found in the ",(0,l.mdx)("a",{parentName:"p",href:"https://pub.dev/packages/flutter_acpanalytics#-installing-tab-"},"official Flutter documentation"),"."),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Import the extension.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter_acpanalytics/flutter_acpanalytics.dart';\n")),(0,l.mdx)("ol",{start:3},(0,l.mdx)("li",{parentName:"ol"},"Get the extension version.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-dart"},"String version = await FlutterACPAnalytics.extensionVersion;\n")),(0,l.mdx)(s,{platform:"cordova",task:"add",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"cordova"},"Cordova"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"After creating your Cordova app and adding the Android and iOS platforms, add the Analytics extension.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},"cordova plugin add https://github.com/adobe/cordova-acpanalytics.git\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Get the extension version.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPAnalytics.extensionVersion(function(version) {  \n   console.log("ACPAnalytics version: " + version);\n}, function(error) {  \n   console.log(error);  \n});\n')),(0,l.mdx)(s,{platform:"unity",task:"add",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c"},"C#"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"After importing the ",(0,l.mdx)("a",{parentName:"li",href:"https://github.com/adobe/unity-acpanalytics/blob/master/bin/ACPAnalytics-0.0.1-Unity.zip"},"ACPAnalytics.unitypackage"),", add the Analytics extension for Unity.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"using com.adobe.marketing.mobile;\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Get the extension version.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"ACPAnalytics.extensionVersion();\n")),(0,l.mdx)(s,{platform:"xamarin",task:"add",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-1"},"C#"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"After adding the iOS or Android ACPAnalytics NuGet package, add the Analytics extension.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"using Com.Adobe.Marketing.Mobile;\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Get the extension version.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"ACPAnalytics.ExtensionVersion();\n")),(0,l.mdx)(s,{platform:"android",task:"register",repeat:"4",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-1"},"Java"),(0,l.mdx)("p",null,"The following sample shows how to set up methods that call the ",(0,l.mdx)("a",{parentName:"p",href:"..//mobile-core/api-reference.md#setapplication-android-only"},"setApplication()")," method in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"onCreate()")," method:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'public class MobileApp extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        MobileCore.setApplication(this);\n        MobileCore.configureWithAppID("yourAppId");\n        try {\n            Analytics.registerExtension(); //Register Analytics with Mobile Core\n            Identity.registerExtension();\n            MobileCore.start(null);\n        } catch (Exception e) {\n            //Log the exception\n         }\n    }\n}\n')),(0,l.mdx)("p",null,"Analytics depends on the Identity extension and is automatically included in Core by Maven. When manually installing the Analytics extension, ensure that you add the ",(0,l.mdx)("inlineCode",{parentName:"p"},"identity-1.x.x.aar")," library to your project."),(0,l.mdx)(s,{platform:"ios",task:"register",repeat:"7",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift"},"Swift"),(0,l.mdx)("p",null,"In your app's ",(0,l.mdx)("inlineCode",{parentName:"p"},"_:didFinishLaunchingWithOptions")," function, register the Audience Manager extension with the Mobile Core:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n     ACPCore.configure(withAppId: "yourAppId")   \n     ACPAnalytics.registerExtension()\n     ACPIdentity.registerExtension()\n     ACPCore.start(nil)\n     // Override point for customization after application launch.\n     return true;\n}\n')),(0,l.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,l.mdx)("p",null,"In your app's ",(0,l.mdx)("inlineCode",{parentName:"p"},"application:didFinishLaunchingWithOptions"),", register Analytics with Mobile Core:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [ACPCore configureWithAppId:@"yourAppId"];\n    [ACPAnalytics registerExtension];\n    [ACPIdentity registerExtension];\n    [ACPCore start:nil];\n    // Override point for customization after application launch.\n    return YES;\n }\n')),(0,l.mdx)("p",null,"Analytics depends on the Identity extension and is automatically included in the Core pod. When installing the Analytics extension manually, ensure that you added the ",(0,l.mdx)("inlineCode",{parentName:"p"},"libACPIdentity_iOS.a")," library to your project."),(0,l.mdx)(s,{platform:"react-native",task:"register",repeat:"2",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript-1"},"JavaScript"),(0,l.mdx)("p",null,"When using React Native, register Analytics with Mobile Core in native code as shown on the Android and iOS tabs."),(0,l.mdx)(s,{platform:"flutter",task:"register",repeat:"2",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"dart"},"Dart"),(0,l.mdx)("p",null,"When using Flutter, register Analytics with Mobile Core in native code as shown on the Android and iOS tabs."),(0,l.mdx)(s,{platform:"cordova",task:"register",repeat:"2",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"cordova-1"},"Cordova"),(0,l.mdx)("p",null,"When using Cordova, register Analytics with Mobile Core in native code as shown on the Android and iOS tabs."),(0,l.mdx)(s,{platform:"unity",task:"register",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-2"},"C#"),(0,l.mdx)("p",null,"Register the extension in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"start()")," function:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'using com.adobe.marketing.mobile;\nusing using AOT;\n\npublic class MainScript : MonoBehaviour\n{\n    [MonoPInvokeCallback(typeof(AdobeStartCallback))]\n    public static void HandleStartAdobeCallback()\n    {   \n        ACPCore.ConfigureWithAppID("1423ae38-8385-8963-8693-28375403491d");\n    }\n\n    // Start is called before the first frame update\n    void Start()\n    {   \n        ACPAnalytics.registerExtension();\n        ACPCore.Start(HandleStartAdobeCallback);\n    }\n}\n')),(0,l.mdx)(s,{platform:"xamarin",task:"register",repeat:"7",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-3"},"C#"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"iOS")),(0,l.mdx)("p",null,"Register the Analytics extension in your app's ",(0,l.mdx)("inlineCode",{parentName:"p"},"FinishedLaunching()")," function:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n  global::Xamarin.Forms.Forms.Init();\n  LoadApplication(new App());\n    ACPAnalytics.RegisterExtension();\n  // start core\n  ACPCore.Start(startCallback);\n  return base.FinishedLaunching(app, options);\n}\n\nprivate void startCallback()\n{\n  // set launch config\n  ACPCore.ConfigureWithAppID("yourAppId");\n}\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Android")),(0,l.mdx)("p",null,"Register the Analytics extension in your app's ",(0,l.mdx)("inlineCode",{parentName:"p"},"OnCreate()")," function:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'protected override void OnCreate(Bundle savedInstanceState)\n{\n  base.OnCreate(savedInstanceState);\n  global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n  LoadApplication(new App());\n  ACPAnalytics.RegisterExtension();\n\n  // start core\n  ACPCore.Start(new CoreStartCompletionCallback());\n}\n\nclass CoreStartCompletionCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object callback)\n  {\n    // set launch config\n    ACPCore.ConfigureWithAppID("yourAppId");\n  }\n}\n')),(0,l.mdx)(s,{platform:"android",task:"serialize",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-2"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'cdata.put("&&events", "event1:12341234");\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'//create a context data dictionary\nHashMap cdata = new HashMap<String, Object>();\n\n// add events\ncdata.put("&&events", "event1:12341234");\n\n// send a tracking call - use either a trackAction or TrackState call.\n// trackAction example:\nMobileCore.trackAction("Action Name", cdata);\n// trackState example:\nMobileCore.trackState("State Name", cdata);\n')),(0,l.mdx)(s,{platform:"ios",task:"serialize",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[contextData setObject:@"eventN:serial number" forKey:@"&&events"];\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'//create a context data dictionary\nNSMutableDictionary *contextData = [NSMutableDictionary dictionary];\n\n// add events\n[contextData setObject:@"event1:12341234" forKey:@"&&events"];\n\n// send the tracking call - use either a trackAction or trackState call.\n// trackAction example:\n[ACPCore trackAction:@"Action Name" data:contextData];\n// trackState example:\n[ACPCore trackState:@"State Name" data:contextData];\n')),(0,l.mdx)(s,{platform:"react-native",task:"serialize",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript-2"},"JavaScript"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'var contextData = {"eventN:serial number": "&&events"};\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'// create a context data dictionary and add events\nvar contextData = {"event1:12341234": "&&events"};\n\n// send the tracking call - use either a trackAction or trackState call.\n// trackAction example:\nACPCore.trackAction("Action Name", contextData);\n// trackState example:\nACPCore.trackState("State Name", contextData);\n')),(0,l.mdx)(s,{platform:"flutter",task:"serialize",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"dart-1"},"Dart"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-dart"},'var contextData = {"eventN:serial number": "&&events"};\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-dart"},'// create a context data dictionary and add events\nvar contextData = {"event1:12341234": "&&events"};\n\n// send the tracking call - use either a trackAction or trackState call.\n// trackAction example:\nFlutterACPCore.trackAction("Action Name",  data: contextData);\n// trackState example:\nFlutterACPCore.trackState("State Name",  data: contextData);\n')),(0,l.mdx)(s,{platform:"cordova",task:"serialize",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"cordova-2"},"Cordova"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'var contextData = {"eventN:serial number": "&&events"};\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'// create a context data dictionary and add events\nvar contextData = {"event1:12341234": "&&events"};\n\n// send the tracking call - use either a trackAction or trackState call.\n// trackAction example:\nACPCore.trackAction("Action Name", contextData, function(handleCallback) {\n  console.log("AdobeExperenceSDK: Track action success: " + handleCallback);\n}, function(handleError) {\n  console.log("AdobeExperenceSDK: Failed to track action: " + handleError);\n});\n// trackState example:\nACPCore.trackState("State Name", contextData, function(handleCallback) {\n  console.log("AdobeExperenceSDK: Track state success: " + handleCallback);\n}, function(handleError) {\n  console.log("AdobeExperenceSDK: Failed to track state: " + handleError);\n});\n')),(0,l.mdx)(s,{platform:"unity",task:"serialize",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-4"},"C#"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'var contextData = new Dictionary<string, string>();\ncontextData.Add("key", "trackAction");\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'// create a context data dictionary and add events\nvar contextData = new Dictionary<string, string>();\ncontextData.Add("key", "trackAction");\n\n// send the tracking call - use either a trackAction or trackState call.\n// trackAction example:\nACPCore.TrackAction("Action Name", contextData);\n\n// trackState example:\nACPCore.TrackState("State Name", contextData);\n')),(0,l.mdx)(s,{platform:"xamarin",task:"serialize",repeat:"9",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-5"},"C#"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'var contextData = new NSMutableDictionary<NSString, NSString>\n{\n  ["&&events"] = new NSString("eventN:serial number")\n};\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"iOS example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'// create a context data dictionary and add events\nvar contextData = new NSMutableDictionary<NSString, NSString>\n{\n  ["&&events"] = new NSString("event1:12341234")\n};\n\n// send the tracking call - use either a trackAction or trackState call.\n// trackAction example:\nACPCore.TrackAction("Action Name", contextData);\n\n// trackState example:\nACPCore.TrackState("State Name", contextData);\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Android syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'var contextData = new Dictionary<string, string>();\ncontextData.Add("&&events", "event1:12341234");\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Android example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'// create a context data dictionary and add events\nvar contextData = new Dictionary<string, string>();\ncontextData.Add("&&events", "event1:12341234");\n\n// send the tracking call - use either a trackAction or trackState call.\n// trackAction example:\nACPCore.TrackAction("Action Name", contextData);\n\n// trackState example:\nACPCore.TrackState("State Name", contextData);\n')),(0,l.mdx)(s,{platform:"android",task:"update",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-3"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'HashMap<String, Object> data = new HashMap<String, Object>();\ndata.put("analytics.server", "sample.analytics.tracking.server");\ndata.put("analytics.rsids", "rsid1,rsid2");\ndata.put("analytics.batchLimit", 10);\ndata.put("analytics.offlineEnabled", true);\n\nMobileCore.updateConfiguration(data);\n')),(0,l.mdx)(s,{platform:"ios",task:"update",repeat:"6",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-1"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'let updatedConfig = ["analytics.server":"sample.analytics.tracking.server",\n                     "analytics.rsids":"rsid1,rsid2",\n                     "analytics.batchLimit":10,\n                     "analytics.offlineEnabled":true]\nACPCore.updateConfiguration(updatedConfig)\n')),(0,l.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *updatedConfig = @{@"analytics.server":@"sample.analytics.tracking.server",\n                                @"analytics.rsids":@"rsid1,rsid2",\n                                @"analytics.batchLimit":@(10),\n                                @"analytics.offlineEnabled":@YES};\n[ACPCore updateConfiguration:updatedConfig];\n')),(0,l.mdx)(s,{platform:"react-native",task:"update",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript-3"},"JavaScript"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.updateConfiguration({"analytics.server": "sample.analytics.tracking.server",\n                             "analytics.rsids": "rsid1,rsid2",\n                             "analytics.batchLimit": 10,\n                             "analytics.offlineEnabled": true});\n')),(0,l.mdx)(s,{platform:"flutter",task:"update",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"dart-2"},"Dart"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-dart"},'FlutterACPCore.updateConfiguration({"analytics.server": "sample.analytics.tracking.server",\n                                    "analytics.rsids": "rsid1,rsid2",\n                                    "analytics.batchLimit": 10,\n                                    "analytics.offlineEnabled": true});\n')),(0,l.mdx)(s,{platform:"cordova",task:"update",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"cordova-3"},"Cordova"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.updateConfiguration({"analytics.server": "sample.analytics.tracking.server",\n                             "analytics.rsids": "rsid1,rsid2",\n                             "analytics.batchLimit": 10,\n                             "analytics.offlineEnabled": true}, function(handleCallback) {\n  console.log("AdobeExperenceSDK: Analytics configuration update success: " + handleCallback);\n}, function(handleError) {\n  console.log("AdobeExperenceSDK: Failed to update analytics configuration: " + handleError);\n});\n')),(0,l.mdx)(s,{platform:"unity",task:"update",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-6"},"C","#"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'var dict = new Dictionary<string, object>();\ndict.Add("analytics.server": "sample.analytics.tracking.server");\ndict.Add("analytics.rsids": "rsid1,rsid2");\ndict.Add("analytics.batchLimit": 10);\ndict.Add("analytics.offlineEnabled": true);\nACPCore.UpdateConfiguration(dict);\n')),(0,l.mdx)(s,{platform:"xamarin",task:"update",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-7"},"C#"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"iOS example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'var config = new NSMutableDictionary<NSString, NSObject>\n{\n  ["analytics.server"] = new NSString("sample.analytics.tracking.server"),\n  ["analytics.rsids"] = new NSString("rsid1,rsid2"),\n  ["analytics.batchLimit"] = new NSNumber(10),\n  ["analytics.offlineEnabled"] = new NSNumber(true)\n};\nACPCore.UpdateConfiguration(config);\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Android example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'var config = new Dictionary<string, Java.Lang.Object>();\nconfig.Add("analytics.server", "sample.analytics.tracking.server");\nconfig.Add("analytics.rsids", "rsid1,rsid2");\nconfig.Add("analytics.batchLimit", 10);\nconfig.Add("analytics.offlineEnabled", true);\nACPCore.UpdateConfiguration(config);\n')))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=274bc8f657f628a3abfaee219e63238a3fde97f0-60ed17d595e8cba23a72.js.map